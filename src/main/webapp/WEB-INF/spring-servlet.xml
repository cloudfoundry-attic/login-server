<?xml version="1.0" encoding="UTF-8" ?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to 
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License. 
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents 
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- The data source has to be defined first -->
	<import resource="env-context.xml" />

	<context:property-placeholder properties-ref="applicationProperties" />

	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>

	<sec:http pattern="/resources/**" security="none" />
	<sec:http pattern="/favicon.ico" security="none" />
	<sec:http pattern="/healthz/**" security="none" />
	<sec:http pattern="/info" security="none" />
	<sec:http pattern="/oauth/token" security="none" />

	<bean class="org.cloudfoundry.identity.uaa.security.web.SecurityFilterChainPostProcessor">
		<property name="requireHttps" value="${require_https:false}" />
		<property name="dumpRequests" value="${dump_requests:false}" />
		<property name="redirectToHttps">
			<list>
				<value>uiSecurity</value>
			</list>
		</property>
	</bean>

	<http pattern="/autologin" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
	</http>

	<http request-matcher-ref="autologinAuthorizeRequestMatcher" entry-point-ref="loginEntryPoint"
		xmlns="http://www.springframework.org/schema/security">
		<!-- TODO: add entry point that can redirect back to client app? -->
		<anonymous enabled="false" />
		<custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER" />
	</http>

	<bean id="basicAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="UAA/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="clientAuthenticationFilter" class="org.cloudfoundry.identity.uaa.login.ClientInfoAuthenticationFilter">
		<property name="clientInfoUrl" value="${uaa.clientinfo.url:http://localhost:8080/uaa/clientinfo}" />
		<property name="allowedGrantTypes" value="authorization_code" />
		<property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
	</bean>

	<bean id="autologinAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
		<constructor-arg ref="autologinAuthenticationManager" />
		<property name="parameterNames">
			<list>
				<value>code</value>
				<value>response_type</value>
			</list>
		</property>
		<property name="methods">
			<set>
				<value>GET</value>
				<value>POST</value>
			</set>
		</property>
	</bean>

	<bean id="autologinAuthenticationManager" class="org.cloudfoundry.identity.uaa.login.AutologinAuthenticationManager">
		<property name="codeStore" ref="autologinCodeStore" />
	</bean>

	<bean id="autologinCodeStore" class="org.cloudfoundry.identity.uaa.login.DefaultAutologinCodeStore">
		<property name="expireCodeWhenUsed" value="${autologin.expire_when_used:true}" />
	</bean>

	<bean id="autologinAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept">
			<list>
				<value>application/json</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
		<property name="parameters">
			<map>
				<entry key="response_type" value="code" />
				<entry key="code" value="" />
			</map>
		</property>
	</bean>

	<!-- For backwards compatibility to the old way of posting credentials to /authorize endpoint -->
	<http name="oldAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcherOld" create-session="stateless"
		entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="remoteAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<anonymous enabled="false" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="oauthAuthorizeRequestMatcherOld" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept">
			<list>
				<value>application/json</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
		<property name="parameters">
			<map>
				<entry key="response_type" value="token" />
				<entry key="credentials" value="{" />
			</map>
		</property>
	</bean>

	<bean id="oauthAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept">
			<list>
				<value>application/json</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
		<property name="parameters">
			<map>
				<entry key="response_type" value="token" />
				<entry key="source" value="credentials" />
			</map>
		</property>
	</bean>

	<!-- Version of the /authorize endpoint for stateless clients such as VMC -->
	<http name="statelessAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless"
		entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="remoteAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<anonymous enabled="false" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http name="uiSecurity" xmlns="http://www.springframework.org/schema/security" authentication-manager-ref="remoteAuthenticationManager"
		disable-url-rewriting="true" entry-point-ref="loginEntryPoint">
		<intercept-url pattern="/login*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/logout.do" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<form-login login-page="/login" username-parameter="username" password-parameter="password"
			login-processing-url="/login.do" authentication-failure-url="/login?error=true" />
		<logout logout-url="/logout.do" success-handler-ref="logoutHandler" />
		<!-- The filter that uses Oauth2 auth-code flow to acquire an Oauth2 token if the user doesn't already have one -->
		<custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</http>

	<authentication-manager xmlns="http://www.springframework.org/schema/security" />

	<bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
		<property name="targetUrlParameter" value="redirect" />
		<property name="defaultTargetUrl" value="/login" />
	</bean>

	<bean id="loginEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg value="/login" />
	</bean>

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="UAA/oauth" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="authzAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
		<constructor-arg ref="remoteAuthenticationManager" />
		<property name="parameterNames">
			<list>
				<value>username</value>
				<value>password</value>
				<value>credentials</value>
			</list>
		</property>
	</bean>

	<mvc:resources location="/" mapping="/**" />

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.cloudfoundry.identity.uaa.login.AutologinController.AutologinRequestConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<mvc:interceptors>
		<bean class="org.cloudfoundry.identity.uaa.login.AnalyticsInterceptor">
			<property name="analytics">
				<bean class="org.cloudfoundry.identity.uaa.login.AnalyticsInterceptor.Analytics">
					<property name="code" value="${analytics.code:UA-22181585-29}" />
					<property name="domain" value="${analytics.domain:cloudfoundry.com}" />
				</bean>
			</property>
		</bean>
	</mvc:interceptors>

	<mvc:default-servlet-handler />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/jsp/" />
				<property name="suffix" value=".jsp" />
			</bean>
		</property>
		<property name="defaultViews">
			<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
		</property>
	</bean>

	<util:map id="links">
		<entry key="home" value="${links.home:https://console.run.pivotal.io}" />
		<entry key="passwd" value="${links.passwd:https://console.run.pivotal.io/password_resets/new}" />
		<entry key="register" value="${links.signup:https://console.run.pivotal.io/register}" />
	</util:map>

	<bean id="homeController" class="org.cloudfoundry.identity.uaa.login.HomeController">
		<property name="links" ref="links" />
	</bean>

	<bean id="autologinController" class="org.cloudfoundry.identity.uaa.login.AutologinController">
		<property name="codeStore" ref="autologinCodeStore" />
		<property name="authenticationManager" ref="remoteAuthenticationManager" />
	</bean>

	<bean id="uaaController" class="org.cloudfoundry.identity.uaa.login.RemoteUaaController">
		<property name="uaaBaseUrl" value="${uaa.url:http://localhost:8080/uaa}" />
		<property name="authorizationTemplate">
			<bean class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
				<constructor-arg ref="uaa" />
			</bean>
		</property>
		<property name="links" ref="links" />
	</bean>

	<bean id="healthzEndpoint" class="org.cloudfoundry.identity.uaa.web.HealthzEndpoint" />

	<oauth:resource id="uaa" access-token-uri="${uaa.token.url:http://localhost:8080/uaa/oauth/token}"
		client-id="login" client-secret="${LOGIN_SECRET:loginsecret}" type="client_credentials" />

	<!--apply the oauth client context -->
	<oauth:client id="oauth2ClientFilter" />

	<oauth:rest-template id="restTemplate" resource="approvals" />

	<!--define an oauth 2 resource for api access -->
	<oauth:resource id="approvals" type="authorization_code" client-id="login" client-secret="${LOGIN_SECRET:loginsecret}"
		access-token-uri="${uaa.token.url:http://localhost:8080/uaa/oauth/token}" user-authorization-uri="${login.authorize.url:http://localhost:8080/login/oauth/authorize}" />

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<bean id="approvalsController" class="org.cloudfoundry.identity.uaa.login.ProfileController">
		<constructor-arg ref="restTemplate" />
		<property name="approvalsUri" value="${uaa.approvals.url:http://localhost:8080/uaa/approvals}" />
		<property name="links" ref="links" />
	</bean>

	<beans profile="default">
		<bean id="remoteAuthenticationManager" class="org.cloudfoundry.identity.uaa.login.RemoteUaaAuthenticationManager">
			<property name="loginUrl" value="${uaa.login.url:http://localhost:8080/uaa/authenticate}" />
		</bean>
	</beans>

	<beans profile="ldap">

		<sec:authentication-manager alias="ldapAuthenticationManager">
			<sec:authentication-provider ref="ldapAuthProvider" />
		</sec:authentication-manager>

		<bean id="remoteAuthenticationManager" class="org.cloudfoundry.identity.uaa.login.UsernamePasswordExtractingAuthenticationManager">
			<constructor-arg ref="ldapAuthenticationManager" />
		</bean>

		<bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
			<constructor-arg value="${ldap.base.url:ldap://localhost:33389/dc=springframework,dc=org}" />
		</bean>

		<bean id="ldapAuthProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
			<constructor-arg>
				<bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
					<constructor-arg ref="contextSource" />
					<property name="userDnPatterns">
						<list>
							<value>uid={0},ou=people</value>
						</list>
					</property>
				</bean>
			</constructor-arg>
			<constructor-arg>
				<bean class="org.springframework.security.ldap.authentication.NullLdapAuthoritiesPopulator" />
			</constructor-arg>
			<property name="authoritiesMapper">
				<bean class="org.springframework.security.core.authority.mapping.SimpleAuthorityMapper">
					<property name="defaultAuthority" value="ROLE_USER" />
				</bean>
			</property>
		</bean>

	</beans>


</beans>
